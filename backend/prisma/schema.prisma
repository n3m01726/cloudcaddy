// Schéma de base de données pour le Multi-Cloud Manager

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model FileMetadata {
  id        String @id @default(cuid())
  userId    String
  fileId    String
  cloudType String

  // Tags et leurs couleurs
  tags      String?
  tagColors String?

  // Métadonnées personnalisées
  customName  String?
  description String?
  starred     Boolean @default(false)
  color       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Index composé unique pour éviter les doublons
  @@unique([userId, fileId, cloudType], name: "userId_fileId_cloudType")
  @@index([userId])
  @@index([starred])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  cloudAccounts CloudAccount[]
  notifications Notification[]

  invitesCreated Invite[]      @relation("UserCreatedInvites") // inverse relation Invite
  projects       ProjectUser[] // <-- inverse relation ProjectUser
}

model CloudAccount {
  id           String    @id @default(cuid())
  email        String?
  userId       String
  provider     String // 'google_drive' ou 'dropbox'
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider], name: "userId_provider")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  source    String // 'app' | 'google' | 'dropbox'
  type      String // 'upload', 'share', 'delete', 'connect', etc.
  message   String
  metadata  Json? // Données additionnelles (fileId, etc.)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([isRead])
  @@map("notifications")
}

model Project {
  id      String        @id @default(cuid())
  name    String
  users   ProjectUser[]
  invites Invite[]
}

model ProjectUser {
  id        String  @id @default(cuid())
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  role      String
}

model Invite {
  id          String   @id @default(cuid())
  token       String   @unique
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  createdBy   User     @relation("UserCreatedInvites", fields: [createdById], references: [id])
  createdById String
  expiresAt   DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())
}
